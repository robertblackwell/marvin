<!DOCTYPE html>

<html lang="en">
<head>
	<meta charset="utf-8">
	<meta name="viewport" content="width=device-width">
	<title>Documentation Class: exports</title>

	<!--[if lt IE 9]>
	<script src="//html5shiv.googlecode.com/svn/trunk/html5.js"></script>
	<![endif]-->
	<link type="text/css" rel="stylesheet" href="styles/sunlight.default.css">

	<link type="text/css" rel="stylesheet" href="styles/site.cerulean.css">

</head>

<body>

<div class="navbar navbar-default navbar-fixed-top ">
<div class="container">
	<div class="navbar-header">
		<a class="navbar-brand" href="index.html">Documentation</a>
		<button class="navbar-toggle" type="button" data-toggle="collapse" data-target="#topNavigation">
			<span class="icon-bar"></span>
			<span class="icon-bar"></span>
			<span class="icon-bar"></span>
        </button>
	</div>
	<div class="navbar-collapse collapse" id="topNavigation">
		<ul class="nav navbar-nav">
			
			<li class="dropdown">
				<a href="classes.list.html" class="dropdown-toggle" data-toggle="dropdown">Classes<b class="caret"></b></a>
				<ul class="dropdown-menu ">
					<li><a href="Connection.html">Connection</a></li><li><a href="ConnectionV0.html">ConnectionV0</a></li><li><a href="HttpsSlaveMaster.html">HttpsSlaveMaster</a></li><li><a href="module.html#.exports">module.exports</a></li>
				</ul>
			</li>
			
			<li class="dropdown">
				<a href="global.html" class="dropdown-toggle" data-toggle="dropdown">Global<b class="caret"></b></a>
				<ul class="dropdown-menu ">
					<li><a href="global.html#http">http</a></li><li><a href="global.html#HttpsSlave">HttpsSlave</a></li><li><a href="global.html#MitmServer">MitmServer</a></li><li><a href="global.html#pipeAndCollectStreamContent">pipeAndCollectStreamContent</a></li><li><a href="global.html#stripRequest">stripRequest</a></li><li><a href="global.html#stripResponse">stripResponse</a></li><li><a href="global.html#testFileExists">testFileExists</a></li>
				</ul>
			</li>
			
		</ul>
        
            <div class="col-sm-3 col-md-3">
                <form class="navbar-form" role="search">
                    <div class="input-group">
                        <input type="text" class="form-control" placeholder="Search" name="q" id="search-input">
                        <div class="input-group-btn">
                            <button class="btn btn-default" id="search-submit"><i class="glyphicon glyphicon-search"></i></button>
                        </div>
                    </div>
                </form>
            </div>
        
	</div>

</div>
</div>


<div class="container" id="toc-content">
<div class="row">

	
	<div class="col-md-8">
	
		<div id="main">
			

	<h1 class="page-title">Class: exports</h1>
<section>

<header>
    
        <h2>
        exports
        </h2>
        
            <div class="class-description"><p>This class implements the proxy forwarding process for http/https protocols.
Takes a client req (IncomingMessage), </p>
<pre class="prettyprint source"><code>-    modifies headers as necessary, 
-    passes it up to the target server,
-    gets the response from the target server
-    modifies that response as necessary
-    sends it down to the originating client
-    and notifies the http(s) transaction - say more about this</code></pre></div>
        
    
</header>


<article>
    <div class="container-overview">
    
        
<hr>
<dt>
    <h4 class="name" id=".exports"><span class="type-signature"></span>new exports()</h4>
    
    
</dt>
<dd>

    

    

    

    
    

    
<dl class="details">
    

	

	

	

    

    

    

    

	

	

	

	

	



	

	

	

	
</dl>


    

    

    

    

    

    

    
</dd>

    
    </div>

    

    

    

    

    

    

    
        <h3 class="subsection-title">Methods</h3>

        <dl>
            
<hr>
<dt>
    <h4 class="name" id=".createHttpsTunnelReport"><span class="type-signature">&lt;static> </span>createHttpsTunnelReport(status, host, port)</h4>
    
    
</dt>
<dd>

    
    <div class="description">
        <p>Creates an object that reports a https tunnel</p>
    </div>
    

    

    

    
    
        <h5>Parameters:</h5>
        

<table class="params table table-striped">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>status</code></td>
            

            <td class="type">
            
            </td>

            

            

            <td class="description last"><p>string</p></td>
        </tr>

    

        <tr>
            
                <td class="name"><code>host</code></td>
            

            <td class="type">
            
            </td>

            

            

            <td class="description last"><p>string</p></td>
        </tr>

    

        <tr>
            
                <td class="name"><code>port</code></td>
            

            <td class="type">
            
            </td>

            

            

            <td class="description last"><p>number</p></td>
        </tr>

    
    </tbody>
</table>

    

    
<dl class="details">
    

	

	

	

    

    

    

    

	

	

	

	

	



	

	

	

	
</dl>


    

    

    

    

    

    
    <h5>Returns:</h5>
    
            
<div class="param-desc">
    <ul>
<li>a report object literal</li>
</ul>
</div>




        

    
</dd>

        
            
<hr>
<dt>
    <h4 class="name" id=".createHttpTransactionReport"><span class="type-signature">&lt;static> </span>createHttpTransactionReport(protocol, req, resp)</h4>
    
    
</dt>
<dd>

    
    <div class="description">
        <p>Creates an object that reports a http or proxied https request/response cycle where the request
and response have been captured (not tunneled)</p>
    </div>
    

    

    

    
    
        <h5>Parameters:</h5>
        

<table class="params table table-striped">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>protocol</code></td>
            

            <td class="type">
            
            </td>

            

            

            <td class="description last"><p>string http: or https:</p></td>
        </tr>

    

        <tr>
            
                <td class="name"><code>req</code></td>
            

            <td class="type">
            
            </td>

            

            

            <td class="description last"><p>IncomingMessage</p></td>
        </tr>

    

        <tr>
            
                <td class="name"><code>resp</code></td>
            

            <td class="type">
            
            </td>

            

            

            <td class="description last"><p>IncomingMessage</p></td>
        </tr>

    
    </tbody>
</table>

    

    
<dl class="details">
    

	

	

	

    

    

    

    

	

	

	

	

	



	

	

	

	
</dl>


    

    

    

    

    

    
    <h5>Returns:</h5>
    
            
<div class="param-desc">
    <ul>
<li>a report object literal</li>
</ul>
</div>




        

    
</dd>

        
            
<hr>
<dt>
    <h4 class="name" id="forward"><span class="type-signature"></span>forward(req, resp, cb)</h4>
    
    
</dt>
<dd>

    
    <div class="description">
        <p>This method does all the heavy lifting of the proxying or request forwarding
process and also provides to hook for extracting the request/response for monitoring.</p>
<p>The procss is roughly as follows:</p>
<pre class="prettyprint source"><code>-    take the initial client request &quot;req&quot; (of type IncomingMessage) and from this construct a 
    (maybe modified) request to the target server. This will at least involve taking the proxy stuff out of
    the headers.

-    when the response (of type IncomingMessage) arrives from the target server, from it build (fill in the details of)
    the response &quot;resp&quot; (of type ServerResponse )that is destined for the initial client
    and again there might be some header modifications.

-    once the response to the initial client signals &quot;finish&quot; - meaning all responsibility for this response 
    has passed to the OS signal the outside world by triggering a &quot;finish&quot; event on the 

    Mitm object - @TODO - this is not the correct object now

    so watches can log the transaction. The event name &quot;finish&quot; is probably a bit unfortunate

-    the finish event handler has signature function(req, res) where
    -    req is the original client req of type IncomingMessage to which has been added a rawBody property
        of type Buffer
    -    res is the response from the target server of type IncomingMessage to which (in selected cases) has
        been added a property rawBody. The rawBody is only added if this.shouldCollectResponseBody() returns true</code></pre>
    </div>
    

    

    

    
    
        <h5>Parameters:</h5>
        

<table class="params table table-striped">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>req</code></td>
            

            <td class="type">
            
            </td>

            

            

            <td class="description last"><p>IncomeingMessage     -     the request message from the original client</p></td>
        </tr>

    

        <tr>
            
                <td class="name"><code>resp</code></td>
            

            <td class="type">
            
            </td>

            

            

            <td class="description last"><p>ServerResponse        -     the response to be sent to the initial client</p></td>
        </tr>

    

        <tr>
            
                <td class="name"><code>cb</code></td>
            

            <td class="type">
            
            </td>

            

            

            <td class="description last"><p>signals http(s) transaction complete        -    @todo - FIX</p></td>
        </tr>

    
    </tbody>
</table>

    

    
<dl class="details">
    

	

	

	

    

    

    

    

	

	

	

	

	



	

	

	

	
</dl>


    

    

    

    

    

    

    
</dd>

        
            
<hr>
<dt>
    <h4 class="name" id="shouldCollectResponseBody"><span class="type-signature"></span>shouldCollectResponseBody(res)</h4>
    
    
</dt>
<dd>

    
    <div class="description">
        <p>Determine what types of response content we want to collect and signal
on a finish event. The goal here is ONLY to prevent collecting into a buffer a 
large reponse body that we will probably never look at.
For example - Probably do not want to collect image/ video/ audio/ types of content
Put another way only text/<em>  and application/</em> will be collected</p>
    </div>
    

    

    

    
    
        <h5>Parameters:</h5>
        

<table class="params table table-striped">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>res</code></td>
            

            <td class="type">
            
            </td>

            

            

            <td class="description last"><p>IncomingMessage</p></td>
        </tr>

    
    </tbody>
</table>

    

    
<dl class="details">
    

	

	

	

    

    

    

    

	

	

	

	

	



	

	

	

	
</dl>


    

    

    

    

    

    

    
</dd>

        </dl>
    

    

    
</article>

</section>




		</div>
	</div>

	<div class="clearfix"></div>

	
		<div class="col-md-3">
			<div id="toc" class="col-md-3 hidden-xs hidden-sm hidden-md"></div>
		</div>
	

</div>
</div>


    <div class="modal fade" id="searchResults">
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
            <h4 class="modal-title">Search results</h4>
          </div>
          <div class="modal-body"></div>
          <div class="modal-footer">
            <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
          </div>
        </div><!-- /.modal-content -->
      </div><!-- /.modal-dialog -->
    </div>


<footer>


<span class="jsdoc-message">
	Documentation generated by <a href="https://github.com/jsdoc3/jsdoc">JSDoc 3.4.2</a>
	
		on November 2nd 2016, 2:14:55 pm
	
	using the <a href="https://github.com/docstrap/docstrap">DocStrap template</a>.
</span>
</footer>

<script src="scripts/docstrap.lib.js"></script>
<script src="scripts/toc.js"></script>

    <script type="text/javascript" src="scripts/fulltext-search-ui.js"></script>


<script>
$( function () {
	$( "[id*='$']" ).each( function () {
		var $this = $( this );

		$this.attr( "id", $this.attr( "id" ).replace( "$", "__" ) );
	} );

	$( ".tutorial-section pre, .readme-section pre, pre.prettyprint.source" ).each( function () {
		var $this = $( this );

		var example = $this.find( "code" );
		exampleText = example.html();
		var lang = /{@lang (.*?)}/.exec( exampleText );
		if ( lang && lang[1] ) {
			exampleText = exampleText.replace( lang[0], "" );
			example.html( exampleText );
			lang = lang[1];
		} else {
			var langClassMatch = example.parent()[0].className.match(/lang\-(\S+)/);
			lang = langClassMatch ? langClassMatch[1] : "javascript";
		}

		if ( lang ) {

			$this
			.addClass( "sunlight-highlight-" + lang )
			.addClass( "linenums" )
			.html( example.html() );

		}
	} );

	Sunlight.highlightAll( {
		lineNumbers : true,
		showMenu : true,
		enableDoclinks : true
	} );

	$.catchAnchorLinks( {
        navbarOffset: 10
	} );
	$( "#toc" ).toc( {
		anchorName  : function ( i, heading, prefix ) {
			return $( heading ).attr( "id" ) || ( prefix + i );
		},
		selectors   : "#toc-content h1,#toc-content h2,#toc-content h3,#toc-content h4",
		showAndHide : false,
		smoothScrolling: true
	} );

	$( "#main span[id^='toc']" ).addClass( "toc-shim" );
	$( '.dropdown-toggle' ).dropdown();

    $( "table" ).each( function () {
      var $this = $( this );
      $this.addClass('table');
    } );

} );
</script>



<!--Navigation and Symbol Display-->


<!--Google Analytics-->



    <script type="text/javascript">
        $(document).ready(function() {
            SearcherDisplay.init();
        });
    </script>


</body>
</html>